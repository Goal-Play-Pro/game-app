import { NestFactory } from '@nestjs/core';
import { ValidationPipe, Logger } from '@nestjs/common';
import { SwaggerModule, DocumentBuilder } from '@nestjs/swagger';
import { ConfigService } from '@nestjs/config';
import helmet from 'helmet';
import * as compression from 'compression';
import { AppModule } from './app.module';
import { GlobalExceptionFilter } from './common/filters/global-exception.filter';
import { LoggingInterceptor } from './common/interceptors/logging.interceptor';
import { CorrelationIdMiddleware } from './common/middleware/correlation-id.middleware';

async function bootstrap() {
  const logger = new Logger('Bootstrap');
  
  const app = await NestFactory.create(AppModule, {
    logger: ['error', 'warn', 'log', 'debug', 'verbose'],
  });

  const configService = app.get(ConfigService);
  const port = configService.get<number>('PORT', 3000);

  // Security middleware
  app.use(helmet());
  app.use(compression());

  // Global configuration
  app.useGlobalPipes(
    new ValidationPipe({
      whitelist: true,
      forbidNonWhitelisted: true,
      transform: true,
      transformOptions: {
        enableImplicitConversion: true,
      },
    }),
  );

  app.useGlobalFilters(new GlobalExceptionFilter());
  app.useGlobalInterceptors(new LoggingInterceptor());

  // CORS configuration
  app.enableCors({
    origin: ['http://localhost:3000', 'http://localhost:5173', 'http://localhost:3001'],
    credentials: true,
  });

  // Swagger documentation
  const config = new DocumentBuilder()
    .setTitle('Football Game Platform API')
    .setDescription(`
      Backend robusto para plataforma de juegos de f√∫tbol con:
      ‚Ä¢ Autenticaci√≥n multi-chain con wallets
      ‚Ä¢ Sistema de pagos on-chain con USDT
      ‚Ä¢ Sistema gacha para adquisici√≥n de jugadores
      ‚Ä¢ Motor de penalty shootout determin√≠stico
      ‚Ä¢ Gesti√≥n completa de inventario y progresi√≥n
      ‚Ä¢ Contabilidad de doble entrada
    `)
    .setVersion('1.0')
    .addBearerAuth()
    .addTag('app', 'Endpoints b√°sicos de la aplicaci√≥n')
    .addTag('Auth', 'Autenticaci√≥n con wallets')
    .addTag('wallet', 'Gesti√≥n de wallets')
    .addTag('Shop', 'Sistema de tienda')
    .addTag('Orders', 'Gesti√≥n de √≥rdenes')
    .addTag('Gacha', 'Sistema gacha')
    .addTag('Inventory', 'Gesti√≥n de inventario')
    .addTag('Penalty', 'Gameplay de penales')
    .addTag('ledger', 'Sistema contable')
    .addTag('Admin', 'Administraci√≥n')
    .addServer(`http://localhost:${port}`, 'Servidor de desarrollo')
    .build();

  const document = SwaggerModule.createDocument(app, config);
  SwaggerModule.setup('api/docs', app, document, {
    customSiteTitle: 'Football Gaming Platform API',
    customfavIcon: '/favicon.ico',
    customCss: '.swagger-ui .topbar { display: none }',
    swaggerOptions: {
      persistAuthorization: true,
      displayRequestDuration: true,
    },
  });

  await app.listen(port);
  
  // Logs informativos
  logger.log(`üöÄ Aplicaci√≥n ejecut√°ndose en: http://localhost:${port}`);
  logger.log(`üìö Documentaci√≥n Swagger: http://localhost:${port}/api/docs`);
  logger.log(`üè• Health Check: http://localhost:${port}/health`);
  logger.log(`üìä Status: http://localhost:${port}/status`);
  logger.log(`üîç API Info: http://localhost:${port}/`);
  logger.log(`üìã Endpoints disponibles:`);
  logger.log(`   ‚Ä¢ GET / - Informaci√≥n de la API`);
  logger.log(`   ‚Ä¢ GET /health - Health check`);
  logger.log(`   ‚Ä¢ GET /status - Estado detallado`);
  logger.log(`   ‚Ä¢ GET /version - Versi√≥n de la API`);
  logger.log(`   ‚Ä¢ GET /api/docs - Documentaci√≥n Swagger`);
}

bootstrap().catch((error) => {
  console.error('Error al iniciar la aplicaci√≥n:', error);
  process.exit(1);
});